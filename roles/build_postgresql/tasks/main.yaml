- name: install postgresql for rhel
  import_tasks: redhat.yaml
  when: ansible_facts['os_family']|lower == 'redhat'

- name: install postgresql for debian
  import_tasks: debian.yaml
  when: ansible_facts['os_family']|lower == 'debian'

- name: ensure the postgresql service is running
  service:
    name: postgresql
    state: started
    enabled: yes
  become: yes
  when:
    - ansible_distribution|lower == 'ubuntu'

- name: ensure the postgresql service is running
  service:
    name: postgresql-12
    state: started
    enabled: yes
  become: yes
  when:
    - ansible_distribution|lower == 'centos'

- name: get the postgres listening port
  shell:
    cmd: for i in `tasklist.exe | grep -i '[p]ostgres ' | awk '{print $2}' | uniq `; do netstat.exe -ano | grep -i $i | grep -i '[L]ISTENING' | awk '{print $2}' | sed -e 's/.*://' | uniq; done
  register: command_output
  when:
    - inventory_hostname|lower == 'wsl'

- name: set the postgres listening port
  set_fact:
    postgres_default_port: '{{ command_output.stdout }}'
  when: command_output is defined and command_output.stdout is defined and command_output.stdout != ''

- name: get the postgres listening port
  shell:
    cmd: netstat -plunt | grep postmaster | awk '{print $4}' | sed -e 's/.*://' | uniq
  become: yes
  register: command_output
  when:
    - ansible_distribution|lower == 'centos'

- name: set the postgres listening port
  set_fact:
    postgres_default_port: '{{ command_output.stdout }}'
  when: command_output is defined and command_output.stdout is defined and command_output.stdout != ''

- name: change postgresql port
  community.postgresql.postgresql_set:
    port: '{{ postgres_default_port }}'
    name: port
    value: '{{ db_port }}'
  notify: 'restart {{ ansible_distribution|lower }} postgresql'
  become: yes
  become_user: postgres

- name: restart postgresql
  meta: flush_handlers

- name: ensure database is created
  community.postgresql.postgresql_db:
    name: '{{ db_name }}'
    port: '{{ db_port }}'
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
    state: present
  become: yes
  become_user: postgres

- name: add extension to database
  community.postgresql.postgresql_ext:
    name: btree_gist
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    state: present
  become: yes
  become_user: postgres

- name: drop tables
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: '{{ item }}'
    state: absent
    cascade: yes
  loop:
    - product
    - ship_to
  become: yes
  become_user: postgres

- name: create table product in db
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: product
    columns:
      - product_id varchar(25) not null primary key
      - product_type char(1) not null
      - business_unit varchar(25) not null
      - discontinued boolean not null
      - updated_by varchar(25) default 'System'
      - updated_date timestamp default current_timestamp
  become: yes
  become_user: postgres

- name: create table ship to in db
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: ship_to
    columns:
      - st integer not null primary key
      - status varchar(2) not null
      - updated_by varchar(25) default 'System'
      - updated_date timestamp default current_timestamp
  become: yes
  become_user: postgres

- name: create table casmart research group in db
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: casmart_research_group
    columns:
      - research_group_id serial primary key
      - research_group_name varchar(25) not null
      - research_group_contact_name varchar(25) not null
      - research_group_contact_phone varchar(25) not null
      - sourcing varchar(25) not null
      - updated_by varchar(25)
      - updated_date timestamp
  become: yes
  become_user: postgres

- name: create table ship to casmart research group in db
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: ship_to_casmart_research_group
    columns:
      - st integer not null references ship_to
      - research_group_id integer not null references casmart_research_group
      - updated_by varchar(25)
      - updated_date timestamp
  become: yes
  become_user: postgres

- name: create table list price in db
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: list_price
    columns:
      - list_price_id serial primary key
      - sku varchar(25) not null
      - list_price numeric not null
      - effective_date timestamp
      - expiration_date timestamp
      - e1_updated_date timestamp
      - updated_by varchar(25) default 'System'
      - updated_date timestamp default current_timestamp
  become: yes
  become_user: postgres

- name: create index in table list price
  community.postgresql.postgresql_idx:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: list_price
    columns:
      - sku
      - effective_date
      - expiration_date
    idxname: list_price_idx
    idxtype: btree
    unique: yes
    state: present
  become: yes
  become_user: postgres

- name: create table quote price in db
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: quote_price
    columns:
      - quote_price_id bigserial primary key
      - quote_type char(1) not null
      - quote_number integer not null
      - quote_status char(1) not null
      - sku varchar(25) not null
      - ppl varchar(3)
      - st integer not null
      - min_order_quantity integer not null
      - discount numeric
      - fixed_price numeric
      - effective_date timestamp
      - expiration_date timestamp
      - e1_updated_date timestamp
      - updated_by varchar(25) default 'System'
      - updated_date timestamp default current_timestamp
  become: yes
  become_user: postgres

- name: create index in table quote price
  community.postgresql.postgresql_idx:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: quote_price
    columns:
      - quote_type
      - quote_number
      - sku
      - st
      - min_order_quantity
    idxname: quote_price_idx
    idxtype: btree
    unique: yes
    state: present
  become: yes
  become_user: postgres

- name: create table dummy quote price in db
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: dummy_quote_price
    columns:
      - quote_price_id bigserial primary key
      - quote_type char(1) not null
      - quote_number integer not null
      - quote_status char(1) not null
      - sku varchar(25) not null
      - ppl varchar(3)
      - st integer not null
      - min_order_quantity integer not null
      - discount numeric
      - fixed_price numeric
      - effective_date timestamp
      - expiration_date timestamp
      - e1_updated_date timestamp
      - updated_by varchar(25) default 'System'
      - updated_date timestamp default current_timestamp
  become: yes
  become_user: postgres

- name: create index in table dummy quote price
  community.postgresql.postgresql_idx:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: dummy_quote_price
    columns:
      - quote_type
      - quote_number
      - sku
      - min_order_quantity
    idxname: dummy_quote_price_idx
    idxtype: btree
    unique: yes
    state: present
  become: yes
  become_user: postgres

- name: create table product discontinued in db
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: product_discontinued
    columns:
      - product_id varchar(25) primary key
      - product_type char(1) not null
      - business_unit varchar(25) not null
  become: yes
  become_user: postgres

- name: create table product action in db
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: product_action
    columns:
      - sku varchar(25) not null
      - action char(1) not null
      - updated_by varchar(25)
      - updated_date timestamp
  become: yes
  become_user: postgres

- name: create table product action backup in db
  community.postgresql.postgresql_table:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    table: product_action_backup
    columns:
      - sku varchar(25) not null
      - action char(1) not null
      - updated_by varchar(25)
      - updated_date timestamp
  become: yes
  become_user: postgres

- name: generate a random password for user
  set_fact:
    database_password: "{{ lookup('password', '/dev/null length=30 chars=ascii_letters,digits') }}"

- name: create user
  community.postgresql.postgresql_user:
    port: '{{ db_port }}'
    name: '{{ db_user }}'
    password: '{{ database_password }}'
    state: present
  become: yes
  become_user: postgres

- name: ensure user has the access, step 1
  community.postgresql.postgresql_privs:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    role: '{{ db_user }}'
    objs: ALL_DEFAULT
    privs: ALL
    type: default_privs
    grant_option: yes
  become: yes
  become_user: postgres

- name: ensure user has the access, step 2
  community.postgresql.postgresql_privs:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    role: '{{ db_user }}'
    objs: ALL_IN_SCHEMA
    type: table
    privs: SELECT,INSERT,UPDATE,DELETE,TRIGGER
  become: yes
  become_user: postgres

- name: ensure user has the access, step 3
  community.postgresql.postgresql_privs:
    db: '{{ db_name }}'
    port: '{{ db_port }}'
    role: '{{ db_user }}'
    objs: ALL_IN_SCHEMA
    type: sequence
    privs: SELECT,UPDATE,USAGE
  become: yes
  become_user: postgres

- name: ensure user does not have unnecessary privileges
  community.postgresql.postgresql_user:
    port: '{{ db_port }}'
    name: '{{ db_user }}'
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present
  become: yes
  become_user: postgres

- name: get postgresql host
  set_fact:
    database_host: hostvars[inventory_hostname].ansible_host
  when: hostvars[inventory_hostname].ansible_host is defined

- name: get postgresql host
  set_fact:
    database_host: 127.0.0.1
  when: hostvars[inventory_hostname].ansible_connection is defined and
        hostvars[inventory_hostname].ansible_connection == 'local'

- name: generate postgresql config
  template:
    src: ../templates/database_config.j2
    dest: 'vars/postgresql/database_config.yaml'
    force: yes