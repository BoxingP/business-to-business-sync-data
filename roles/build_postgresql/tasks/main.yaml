- name: install required packages
  apt:
    name:
      - libssl-dev
      - libssl-doc
    state: present
  become: yes

- name: install postgresql
  apt:
    name:
      - postgresql
      - postgresql-contrib
      - libpq-dev
      - python3-psycopg2
    state: present
  become: yes

- name: ensure the postgresql service is running
  service:
    name: postgresql
    state: started
    enabled: yes
  become: yes

- name: ensure database is created
  community.general.postgresql_db:
    name: '{{ db_name }}'
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
    state: present
  become: yes
  become_user: postgres

- name: add extension to database
  community.general.postgresql_ext:
    name: btree_gist
    db: '{{ db_name }}'
    state: present
  become: yes
  become_user: postgres

- name: drop tables
  community.general.postgresql_table:
    db: '{{ db_name }}'
    table: '{{ item }}'
    state: absent
    cascade: yes
  loop:
    - product_list
    - ship_to
  become: yes
  become_user: postgres

- name: create table product list in db
  community.general.postgresql_table:
    db: '{{ db_name }}'
    table: product_list
    columns:
      - sku varchar(25) not null primary key
      - business_unit varchar(25) not null
      - discontinued boolean not null
      - updated_by varchar(25) default 'System'
      - updated_date timestamp default current_timestamp
  become: yes
  become_user: postgres

- name: create table ship to in db
  community.general.postgresql_table:
    db: '{{ db_name }}'
    table: ship_to
    columns:
      - st integer not null primary key
      - is_default boolean not null
      - updated_by varchar(25)
      - updated_date timestamp
  become: yes
  become_user: postgres

- name: create table casmart research group in db
  community.general.postgresql_table:
    db: '{{ db_name }}'
    table: casmart_research_group
    columns:
      - research_group_id serial primary key
      - research_group_name varchar(25) not null
      - research_group_contact_name varchar(25) not null
      - research_group_contact_phone varchar(25) not null
      - sourcing varchar(25) not null
      - updated_by varchar(25)
      - updated_date timestamp
  become: yes
  become_user: postgres

- name: create table ship to casmart research group in db
  community.general.postgresql_table:
    db: '{{ db_name }}'
    table: ship_to_casmart_research_group
    columns:
      - st integer not null references ship_to
      - research_group_id integer not null references casmart_research_group
      - updated_by varchar(25)
      - updated_date timestamp
  become: yes
  become_user: postgres

- name: create table list price in db
  community.general.postgresql_table:
    db: '{{ db_name }}'
    table: list_price
    columns:
      - list_price_id serial primary key
      - sku varchar(25) not null
      - list_price numeric not null
      - effective_date timestamp
      - expiration_date timestamp
      - e1_updated_date timestamp
      - updated_by varchar(25) default 'System'
      - updated_date timestamp default current_timestamp
  become: yes
  become_user: postgres

- name: create index in table list price
  community.general.postgresql_idx:
    db: '{{ db_name }}'
    table: list_price
    columns:
      - sku
      - effective_date
      - expiration_date
    idxname: list_price_idx
    idxtype: btree
    unique: yes
    state: present
  become: yes
  become_user: postgres

- name: create table quote price in db
  community.general.postgresql_table:
    db: '{{ db_name }}'
    table: quote_price
    columns:
      - quote_price_id bigserial primary key
      - quote_type char(1) not null
      - quote_number integer not null
      - sku varchar(25) not null
      - st integer not null
      - min_order_quantity integer not null
      - discount numeric
      - fixed_price numeric
      - effective_date timestamp
      - expiration_date timestamp
      - e1_updated_date timestamp
      - updated_by varchar(25) default 'System'
      - updated_date timestamp default current_timestamp
  become: yes
  become_user: postgres

- name: create index in table quote price
  community.general.postgresql_idx:
    db: '{{ db_name }}'
    table: quote_price
    columns:
      - quote_type
      - quote_number
      - sku
      - st
      - min_order_quantity
    idxname: quote_price_idx
    idxtype: btree
    unique: yes
    state: present
  become: yes
  become_user: postgres

- name: create table product discontinued list in db
  community.general.postgresql_table:
    db: '{{ db_name }}'
    table: product_discontinued_list
    columns:
      - sku varchar(25) primary key
      - business_unit varchar(25) not null
  become: yes
  become_user: postgres

- name: create table product action list in db
  community.general.postgresql_table:
    db: '{{ db_name }}'
    table: product_action_list
    columns:
      - sku varchar(25) not null
      - action char(1) not null
      - updated_by varchar(25)
      - updated_date timestamp
  become: yes
  become_user: postgres

- name: create table product action list backup in db
  community.general.postgresql_table:
    db: '{{ db_name }}'
    table: product_action_list_backup
    columns:
      - sku varchar(25) not null
      - action char(1) not null
      - updated_by varchar(25)
      - updated_date timestamp
  become: yes
  become_user: postgres

- name: create user
  community.general.postgresql_user:
    name: '{{ db_user }}'
    password: '{{ db_password }}'
    state: present
  become: yes
  become_user: postgres

- name: ensure user has the access, step 1
  community.general.postgresql_privs:
    db: '{{ db_name }}'
    role: '{{ db_user }}'
    objs: ALL_DEFAULT
    privs: ALL
    type: default_privs
    grant_option: yes
  become: yes
  become_user: postgres

- name: ensure user has the access, step 2
  community.general.postgresql_privs:
    db: '{{ db_name }}'
    role: '{{ db_user }}'
    objs: ALL_IN_SCHEMA
    type: table
    privs: SELECT,INSERT,UPDATE,DELETE,TRIGGER
  become: yes
  become_user: postgres

- name: ensure user has the access, step 3
  community.general.postgresql_privs:
    db: '{{ db_name }}'
    role: '{{ db_user }}'
    objs: ALL_IN_SCHEMA
    type: sequence
    privs: SELECT,UPDATE,USAGE
  become: yes
  become_user: postgres

- name: ensure user does not have unnecessary privileges
  community.general.postgresql_user:
    name: '{{ db_user }}'
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present
  become: yes
  become_user: postgres
